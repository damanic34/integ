package com.ship.track.GenInvoice.Model;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.FileOutputStream;
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.draw.LineSeparator;

public class Invoice {
    public String invoiceID;
    public Shipment shipment;
    public Employee generatedBy;
    public CostBreakdown costBreakdown;
    public Date dateGenerated;

    public Invoice(String invoiceID, Shipment shipment, Employee generatedBy, CostBreakdown costBreakdown, Date dateGenerated) {
        this.invoiceID = invoiceID;
        this.shipment = shipment;
        this.generatedBy = generatedBy;
        this.costBreakdown = costBreakdown;
        this.dateGenerated = dateGenerated;
    }

    // Generate a PDF file for the invoice
    public File generatePDF() throws DocumentException, IOException {
// Create a file with the invoice ID
        String fileName = "Invoice_" + invoiceID + ".pdf";
        File pdfFile = new File(fileName);

// Create PDF document
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, new FileOutputStream(pdfFile));
        document.open();

// Set up date formatting
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM dd, yyyy");

// Add company logo/header
        Font titleFont = new Font(Font.FontFamily.HELVETICA, 20, Font.BOLD);
        Paragraph title = new Paragraph("INVOICE", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        document.add(title);
        document.add(Chunk.NEWLINE);

// Add invoice details
        Font normalFont = new Font(Font.FontFamily.HELVETICA, 12);
        Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
        Font headingFont = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);

        Paragraph invoiceDetails = new Paragraph();
        invoiceDetails.add(new Chunk("Invoice ID: ", boldFont));
        invoiceDetails.add(new Chunk(invoiceID, normalFont));
        invoiceDetails.add(Chunk.NEWLINE);

        invoiceDetails.add(new Chunk("Date: ", boldFont));
        invoiceDetails.add(new Chunk(sdf.format(dateGenerated), normalFont));
        invoiceDetails.add(Chunk.NEWLINE);

        invoiceDetails.add(new Chunk("Generated By: ", boldFont));
        invoiceDetails.add(new Chunk(generatedBy.name + " (Employee ID: " + generatedBy.employeeID + ")", normalFont));
        document.add(invoiceDetails);
        document.add(Chunk.NEWLINE);

// Customer Information
        document.add(new Paragraph("Customer Information:", headingFont));
        LineSeparator ls = new LineSeparator();
        document.add(ls);

        Paragraph customerInfo = new Paragraph();
        customerInfo.add(new Chunk("Customer Name: ", boldFont));
        customerInfo.add(new Chunk(shipment.customer.name, normalFont));
        customerInfo.add(Chunk.NEWLINE);

        customerInfo.add(new Chunk("Customer Email: ", boldFont));
        customerInfo.add(new Chunk(shipment.customer.email, normalFont));
        document.add(customerInfo);
        document.add(Chunk.NEWLINE);

// Shipment Details
        document.add(new Paragraph("Shipment Details:", headingFont));
        document.add(ls);

        Paragraph shipmentInfo = new Paragraph();
        shipmentInfo.add(new Chunk("Shipment ID: ", boldFont));
        shipmentInfo.add(new Chunk(shipment.shipmentID, normalFont));
        shipmentInfo.add(Chunk.NEWLINE);

        shipmentInfo.add(new Chunk("Shipment Date: ", boldFont));
        shipmentInfo.add(new Chunk(sdf.format(shipment.date), normalFont));
        shipmentInfo.add(Chunk.NEWLINE);

        shipmentInfo.add(new Chunk("Status: ", boldFont));
        shipmentInfo.add(new Chunk(shipment.status, normalFont));
        document.add(shipmentInfo);
        document.add(Chunk.NEWLINE);

// Cargo Details
        document.add(new Paragraph("Cargo Details:", headingFont));
        document.add(ls);

        Paragraph cargoInfo = new Paragraph();
        cargoInfo.add(new Chunk("Type: ", boldFont));
        cargoInfo.add(new Chunk(shipment.cargo.type, normalFont));
        cargoInfo.add(Chunk.NEWLINE);

        cargoInfo.add(new Chunk("Weight: ", boldFont));
        cargoInfo.add(new Chunk(shipment.cargo.weight + " kg", normalFont));
        cargoInfo.add(Chunk.NEWLINE);

        cargoInfo.add(new Chunk("Description: ", boldFont));
        cargoInfo.add(new Chunk(shipment.cargo.description, normalFont));
        document.add(cargoInfo);
        document.add(Chunk.NEWLINE);

// Cost Breakdown
        document.add(new Paragraph("Cost Breakdown:", headingFont));
        document.add(ls);

// Create a table for cost breakdown
        PdfPTable table = new PdfPTable(2);
        table.setWidthPercentage(100);

// Add table headers
        PdfPCell cell;

        cell = new PdfPCell(new Phrase("Item", boldFont));
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Cost", boldFont));
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell.setBorder(Rectangle.BOTTOM);
        table.addCell(cell);

// Add cost items
        table.addCell("Base Shipping Cost");
        table.addCell(String.format("$%.2f", costBreakdown.baseShippingCost));

        table.addCell("Insurance");
        table.addCell(String.format("$%.2f", costBreakdown.insuranceCost));

        table.addCell("Handling Fee");
        table.addCell(String.format("$%.2f", costBreakdown.handlingFee));

        double subtotal = costBreakdown.baseShippingCost + costBreakdown.insuranceCost + costBreakdown.handlingFee;

        cell = new PdfPCell(new Phrase("Subtotal", boldFont));
        cell.setBorder(Rectangle.TOP);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(String.format("$%.2f", subtotal), boldFont));
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell.setBorder(Rectangle.TOP);
        table.addCell(cell);

        table.addCell("Tax (" + (int)(costBreakdown.taxRate * 100) + "%)");
        table.addCell(String.format("$%.2f", costBreakdown.tax));

        cell = new PdfPCell(new Phrase("Total Cost", boldFont));
        cell.setBorder(Rectangle.TOP);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(String.format("$%.2f", costBreakdown.totalCost), boldFont));
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell.setBorder(Rectangle.TOP);
        table.addCell(cell);

        document.add(table);
        document.add(Chunk.NEWLINE);

// Payment Information
        document.add(new Paragraph("Payment Information:", headingFont));
        document.add(ls);

        Paragraph paymentInfo = new Paragraph();
        paymentInfo.add(new Chunk("Payment Terms: ", boldFont));
        paymentInfo.add(new Chunk("Due within 30 days of invoice date", normalFont));
        paymentInfo.add(Chunk.NEWLINE);

        paymentInfo.add(new Chunk("Payment Method: ", boldFont));
        paymentInfo.add(new Chunk("Bank transfer or check", normalFont));
        document.add(paymentInfo);
        document.add(Chunk.NEWLINE);

// Thank you message
        Paragraph thankYou = new Paragraph("Thank you for your business!", new Font(Font.FontFamily.HELVETICA, 12, Font.ITALIC));
        thankYou.setAlignment(Element.ALIGN_CENTER);
        document.add(thankYou);

// Close the document
        document.close();

        return pdfFile;
    }

    // Method to send invoice by email
    public boolean sendInvoiceByEmail(String smtpHost, String smtpPort,
                                      String senderEmail, String senderPassword,
                                      String emailSubject, String emailBody) {
        String recipientEmail = this.shipment.customer.email;

// Configure email properties
        Properties properties = new Properties();
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.host", smtpHost);
        properties.put("mail.smtp.port", smtpPort);

// Create a session with authentication
        Session session = Session.getInstance(properties, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(senderEmail, senderPassword);
            }
        });

        try {
// Generate the PDF
            File pdfFile = generatePDF();

// Create a multipart message
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(senderEmail));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
            message.setSubject(emailSubject);

// Create the message part for text
            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText(emailBody);

// Create the multipart message
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);

// Part two is attachment
            messageBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(pdfFile);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(pdfFile.getName());
            multipart.addBodyPart(messageBodyPart);

// Set the complete message parts
            message.setContent(multipart);

// Send message
            Transport.send(message);

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}

